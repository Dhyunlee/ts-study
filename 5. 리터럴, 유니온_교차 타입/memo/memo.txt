#5 리터럴, 유니온/교차 타입


 Literal Types(리터럴 타입)
 - 자바스크립트에서 변수를 선언할 때, let과 const를 사용하는데 
   let으로 선언한 변수인 경우 언제든지 다른 값으로 변경할 수
   있으므로 보다 넓은 개념의 스트링 타입으로 정의된다. 
   (즉, 최초 할당된 타입이 스트링이다.)

 - let으로 선언된 값을 변경하려면 타입을 지정해줘야한다. 
 
 - 반면 const로 선언된 변수는 값이 변경되지 않고 선언과 동시에 
   할당하게 된다. 따라서 const로 선언된 변수의 타입은 
   스트링으로 정해진다. 이처럼 정해진 스트링 값을 가지는 타입을 
   Literal Types (문자열 리터럴 타입) 이라 한다.    

 - type키워드로 Literal Types와 비슷하게 형태를 만들 수 있다. 
  ◎ type Job = 'police' | 'developer' | 'teacher';

    const user: User = {
      name: 'Bob',
      job: 'student', 
    };
    → Job의 타입에 정의한 값만 사용할 수 있다. 


 - 유니언 타입 
  사실 앞전에 사용한 바 있다. 아래와 같은 형태로 사용
  ex) string | number 

  유니온 타입이란 
   A 또는 B의 타입 중 하나를 사용하는 타입

    interface Car {
    name: 'car';
    color: string;
    start(): void;
  }

  interface Mobile {
    name: 'mobile';
    color: string;
    call(): void;
  }

  function getGift(gift: Car | Mobile) {
    console.log(gift.color);
     → Car, Mobile 둘다 color가 존재하므로 문제가 되지 않음
    gift.start(); 
     → start 속성은 Car에만 존재하며 gift가 Car 인지 먼저 
       확인해야한다. 즉 아래처럼 처리하면 된다. 

      if (gift.name === 'car') {
        gift.start();
      } else {
        gift.call();
      }
      → 검사해야할 항목이 많을 때에는 switch 문을 
        사용하는 것이 가독성에 좋다.

      → 이렇게 작성한 후 gift에 마우스를 올려보면 
        어떤 타입을 반환하는 지를 알 수 있다. 
        이처럼 동일한 속성의 타입을 다르게 해서 구분할 수 
        있는 것을 "식별 가능한 유니온 타입"이라 한다.  
  }

  - Intersection Types(교차 타입)
   ◎ 교차 타입은 여러 타입을 합쳐서 사용하는 타입이다. 
   ◎ 유니온 타입이 A 또는 B 처럼 or 을 의미였다면 
     교차 타입은 A + B 처럼 and을 의미하는 타입이다. 
   ◎ 유니온 타입은 | 을 사용했다면 교차 타입은 & 를 사용한다.
   ◎ 교차 타입은 변수에 지정하는 타입을 & 를 사용해서 정의하는데
     이때 정의한 타입의 속성을 아래와 같이 모두 작성해야한다. 
     
    인터페이스 정의 
      interface Car {
       name: string;
       start(): void;
      }

      interface Toy {
       name: string;
       color: string;
       price: number;
      }

   교차 타입 사용 
    const toyCar: Toy & Car = {
      name: '타요',
      start() {},
      color: 'blue',
      price: 100,
    };

