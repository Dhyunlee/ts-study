#7 Generic(제네릭)

Generic(제네릭)
 - 제네릭을 이용하면 클래스, 함수, 인터페이스를 다양한 타입으로
   재사용할 수 있다. 

 - 선언할 때는 타입 파리미터만 작성해주고 호출 또는 생성하는 
   시점에 사용하는 타입을 결정한다. 


1) 함수에서 사용하기
  function getSize(arr: number[]): number {
    return arr.length;
  }

  const arr1 = [1, 2, 3];
  getSize(arr1);
  
  const arr2 = ['a', 'b', 'c'];
  getSize(arr2);
  → 타입이 다른 요소를 가진 배열을 인자로 전달하면 
    에러가 생긴다. 숫자 타입의 배열에는 문자열 타입의 
    배열이 올 수 없기 때문

  → 함수의 매개변수의 타입이 변경되어도 함수를 그대로 
    사용하고 싶다면 함수 오버로드 또는 유니온 타입으로 
    변경하면 된다.  

  → 유니온 타입으로 지정하기
    const arr1_ = [1, 2, 3];
    getSize2<number | string>(arr1_);
  
    그런데 이런식으로 타입을 지정하면 타입이 확장될 수 있다면 
    그때마다 타입을 추가해야한다. 이럴때 사용할 수 있는 게 제네릭이다. 

  사용방법 
  1) 선언할 때 <T> 형태로 지정해준다. 
  → 이것을 Type parameter 라고 한다. 
  → T 대신 다른 문자를 사용할 수 있지만 T를 보통 사용
  → 이 T는 어떤 타입이든 전달 받아서 사용할 수 있게 해준다.
  
  2) 호출 또는 생성하는 시점에 타입을 지정해준다. 


  // 선언할 때 <T> 형태로 지정
  function getSize2<T>(arr: T[]): number {
    return arr.length;
  }

  // 호출시 타입 지정
  const arr1 = [1, 2, 3];
  getSize2<number>(arr1);
  ◎ 이것은 아래와 같이 선언한것과 같다. 
   → 함수 호출문에서 함수명에 마우스를 올리면 
     어떤 타입으로 선언되었는지 볼 수 있다. 

  function getSize2<number>(arr: number[]): number {
    return arr.length;
  }

  즉 T부분에 호출 및 생성할 때 지정한 타입이 들어간다고 보면된다.


2) 인터페이스에서 사용하기
 - 인터페이스를 정의할 때 어떤 타입이 전달될 지를 모를 때 
   제너릭을 사용할 수 있다. 

  interface Mobile<T> {
    name: string;
    price: number;
    option: T;
  }  
  → option 속성에는 어떠한 타입이든 올 수 있어서 제네릭 으로 지정했다. 
   

  const m1: Mobile<string> = {
    name: 's22',
    price: 900,
    option: 'good',
  };
  → option 속성에 문자열 타입의 값이 온 경우이다. 

  const m2: Mobile<{ color: string; coupon: boolean }> = {
     name: 's22',
     price: 1000,
     option: {
         color: 'red',
         coupon: false,
     },
  }; 
  → option 객체가 정해져있다면 위와 같이 타입을 지정할 수 있다. 



